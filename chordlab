#! /usr/bin/env python
# -*- coding: utf-8 -*-

from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4

c = canvas.Canvas("result.pdf")

margin = 50
ypos = A4[1] - 2*margin/3
xpos = margin
colstart = ypos

def newPage(c) :
    c.showPage()
    c.line(margin, A4[1] - margin/2, A4[0] - margin, A4[1] - margin/2)
    c.line(margin, margin/2, A4[0] - margin, margin/2)
    global ypos
    ypos = A4[1] - margin
    global xpos
    xpos = margin

usedchords = []

knownchords = {
    'A':   [None, 0, 2, 2, 2, 0],
    'Am':  [None, 0, 2, 2, 1, 0],
    'A7':  [None, 0, 2, 0, 2, 0],
    'Am7': [None, 0, 2, 0, 1, 0],
    'Bb':  [None, 1, 3, 3, 3, 1],
    'Bb':  [None, 1, 3, 3, 3, 1],
    'B':   [None, 2, 4, 4, 4, 2], # TODO: proper bare
    'Bm':  [None, 2, 4, 4, 3, 2], # TODO: proper bare
    'B7':  [None, 2, 4, 2, 4, 2], # TODO: proper bare
    'C':   [None, 3, 2, 0, 1, 0],
    'D':   [None, None, 0, 2, 3, 2],
    'Dm':  [None, None, 0, 2, 3, 1], #?
    'D7':  [None, None, 0, 2, 1, 2], #?
    'Dm7': [None, None, 0, 2, 1, 1], #?
    'E':   [0, 2, 2, 1, 0, 0],
    'Em':  [0, 2, 2, 0, 0, 0],
    'E7':  [0, 2, 2, 1, 3, 0],
    'Em7': [0, 2, 2, 0, 3, 0],
    'Eadd9': [0, 2, 2, 1, 3, 3],
    'F':   [1, 3, 3, 2, 1, 1],
    'Fm':  [1, 3, 3, 1, 1, 1],
    'F#m': [2, 4, 4, 2, 2, 2], # TODO: proper bare
    'G':   [3, 2, 0, 0, 0, 3],
    'G7':  [3, 2, 0, 0, 0, 1],
}

def drawChordBox(c, xpos, ypos, chord) :
    dx = 5
    dy = 7
    c.setLineWidth(0.4)
    c.grid(map(lambda x : xpos + dx * x, range(6)), map(lambda y : ypos + dy * y, range(5)))
    c.setStrokeGray(1)
    c.setLineWidth(1)
    c.line(xpos, ypos, xpos + 5*dx, ypos)
    c.setStrokeGray(0)
    c.setFont("Helvetica-Oblique", 10)
    c.drawCentredString(xpos + dx*2.5, ypos + 5*dy, chord)
    
    if knownchords.has_key(chord) :
        c.setFont("Helvetica", 7)
        x = xpos;
        for string in knownchords[chord]: 
            if string == None:
                c.drawCentredString(x, ypos + 4*dy + 1.5, 'x')
            elif string == 0:
                c.drawCentredString(x, ypos + 4*dy + 1.5, 'o')
            else:
                c.circle(x, ypos + (4.5-string)*dy, 2.0*dx/5, stroke=0, fill=1)
        
            x += dx

def drawChordBoxes(c) :
    global usedchords
    usedchords.sort()
    xpos = margin;
    for chord in usedchords:
        drawChordBox(c, xpos, 4*margin/5, chord);
        xpos += 40
    usedchords = []
    
def useChord(chord) :
    global usedchords
    if not chord in usedchords :
        usedchords.append(chord)
        if not knownchords.has_key(chord):
            warn("Unknown chord: " + chord)

def newSong(c) :
    drawChordBoxes(c)
    newPage(c)
    global colw
    global prevfile
    colw = A4[0]
    prevfile = fileinput.filename()
    # print prevfile

import re
statement = re.compile('{([a-z_]+)(: *(.*))?}')
chordre = re.compile('\[([^]]*)\]')

socpos = [0,0]


import fileinput

def doColumnBreak() :
    global ypos
    global xpos
    global colstart
    ypos = colstart
    xpos += colw
    if (xpos + 1 > A4[0] - margin) :
        newPage(c)

def warn(msg) :
    print fileinput.filename() + ':' + str(fileinput.filelineno()), msg
    

prevfile = None
for line in fileinput.input(openhook=fileinput.hook_encoded("iso-8859-1")):
    if prevfile != fileinput.filename():
        newSong(c)
        
    line = line.rstrip()
    m = statement.match(line)
    if m :
        stmt = m.group(1);
        if stmt in ('t', 'title'):
            c.setFont("Times-Bold", 14);
            ypos -= 6
            c.drawCentredString(A4[0]/2, ypos, m.group(3))
            
        elif stmt in ('st', 'subtitle'):
            c.setFont("Times-Roman", 12);
            ypos -= 14
            c.drawCentredString(A4[0]/2, ypos, m.group(3))
            
        elif stmt in ('c', 'comment', 'ci'):
            c.setFont("Times-Italic", 10)
            ypos -= 12
            c.drawString(xpos, ypos, m.group(3))
            
        elif stmt in ('soc', 'start_of_chorus'):
            socpos = [xpos-5, ypos]
            xpos += 10
            
        elif stmt in ('eoc', 'end_of_chorus'):
            xpos -= 10
            c.line(socpos[0], socpos[1], xpos-5, ypos-5)

        elif stmt in ('col', 'cols', 'columns'):
            coln = int(m.group(3))
            colw = (A4[0] - 2*margin) / coln
            colstart = ypos
            # print "Pagew:", A4[0] - 2*margin, "cols:", coln, "colw:", colw
            
        elif stmt in ('colb', 'column_break'):
            doColumnBreak()
                
        elif stmt in ('np', 'new_page'):
            newPage(c)
            
        elif stmt == 'new_song':
            newSong(c)
            
        elif stmt == 'define':
            # TODO define this chord!
            pass
        elif stmt == 'no_grid':
            # TODO no chord grids for this song!
            pass
        
        else:
            warn("Unknown statement: " + m.group(1) + " param: " + str(m.group(3)))
    
    elif len(line) == 0 :
        ypos -= 16
    
    elif line[0] != '#' :
        
        if ypos < margin + 20:
            doColumnBreak()
        ypos -= 24
            
        to = c.beginText(xpos, ypos)
        ischord = 0
        okpos = 0
        for x in chordre.split(line) :
            if ischord :
                useChord(x)
                csp = to.getCursor()
                while csp[0] < okpos :
                    to.textOut(u'\u00B7')
                    csp = to.getCursor()
                to.setFont("Helvetica-Oblique", 10)
                to.setRise(11)
                to.setFillGray(0.5)
            else:
                to.setFont("Times-Roman", 12)
                to.setRise(0)
                to.setFillGray(0)
            to.textOut(x)
            if ischord :
                okpos = to.getCursor()[0]
                to.setTextOrigin(csp[0], csp[1])
            ischord = not(ischord);
        c.drawText(to)

drawChordBoxes(c)
c.showPage()
c.save()
